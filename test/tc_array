#! ruby
require 'test/unit'
require 'rafini/array'

class TestArray < Test::Unit::TestCase
  using Rafini::Array

  def test_joins
    assert_nothing_raised() do
      a = ['a','b','c','d']
      x = ['x','y','z']
      assert_equal('axbyczd', a.joins(*x))
      assert_equal('a,b.cd', a.joins(',','.'))
      assert_equal('a-b:c:d', a.joins('-'){':'})
      assert_equal('a1b2c3d', a.joins{|i|i})
    end
  end

  def test_per
    assert_nothing_raised() do
      a = ['a','b','c','d']
      b = ['A','B','C','D']

      h = {}
      a.per(b){|l,m| h[l]=m}
      assert_equal({'a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D'}, h)

      h = {}
      a.per{|l,i| h[l]=i}
      assert_equal({'a'=>0, 'b'=>1, 'c'=>2, 'd'=>3}, h)

      h = {}
      a.per{|l,i| h[l]=b[i]}
      assert_equal({'a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D'}, h)
    end
  end

  def test_which
    assert_nothing_raised() do
      a = ['dog','cat','bunny','horse','pig','cow']
      b = a.which{|a|a=~/n/}
      assert_equal('bunny', b)
      n = a.which{|a|a=~/q/}
      assert_nil(n)
    end
  end

  def test_is
    assert_nothing_raised() do
      h = {a: false, b: false, c: false}
      assert_equal({a: false, b: true, c: false, d: true}, [:b,:d].is(true,h))
      assert_equal({b: true, d: true}, [:b,:d].is(true))
    end
  end

  def test_any
    assert_nothing_raised() do
      assert [:a,:b,:c].any?(:d,:b)
      assert [:a,:b,:c].any?(:b,:d)
      refute [:a,:b,:c].any?(:d,:e)
      refute [:a,:b,:c].any?
    end
  end

end
