#!/usr/bin/env ruby
require 'test/unit'
require 'rafini/hash'

class TestHash < Test::Unit::TestCase
  using Rafini::Hash

  def test_to_struct
    assert_nothing_raised do
      h = {a:'A',b:'B',c:'C'}
      s = h.to_struct
      assert_equal('A',s.a)
      assert_equal('B',s.b)
      assert_equal('C',s.c)
      # Simple, what else you'd test?
    end
  end

  def test_supplement
    assert_nothing_raised do
      h0 = {a:'A',b:'B'}.supplement({b:'X',c:'C'},{c:'Y',d:'D'})
      assert_equal({a:'A',b:'B',c:'C',d:'D'}, h0)
      h = h0.supplement({a:'Aye',x:'X'})
      refute h==h0
      assert_equal({a:'A',b:'B',c:'C',d:'D'}, h0) # unchanged
      assert_equal({a:'A',b:'B',c:'C',d:'D',x:'X'}, h)
      h0.supplement!({a:'Aye',x:'X'})
      assert h==h0
    end
  end

  def test_amend
    assert_nothing_raised do
      h0 = {a:'A',b:'B'}.amend({b:'X',c:'C'},{c:'Y',d:'D'})
      assert_equal({a:'A',b:'X'}, h0)
      h = h0.amend({a:'Aye'},{a:'Ah'})
      refute h==h0
      assert_equal({a:'A',b:'X'}, h0) # unchanged
      assert_equal({a:'Aye',b:'X'}, h)
      h0.amend!({a:'Aye'},{a:'Ah'})
      assert h==h0
    end
  end
end
